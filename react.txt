jsx - синтаксическое расширение javascript, для описания UI, компилируемое в элементы Реакта и дальше в обычный js.
Компоненты реакта совмещают в себе логику и разметку.
Реакт не требует принудительного использования jsx, но может выводить полезные сообщения об ошибках и варнингах.
В jsx безопасно вставлять данные, введенные пользователем, они не исполняются, а возвращаются в виде строки.

В реакте в фигурные скобки можно помещать любой валидный js код.

----------

Элементы это наименьшие строительные блоки реакт приложений (<h1></h1>, <div></div> ...).
Приложения написаные только на реакте имеют одну входную точку (root), если реакт используется в качестве сторонней библиотеки, можно встраивать куда угодно.

Все реакт элементы иммутабл, создав элемент один раз, вы не можете изменить его детей или атрибуты. Но заменяя один элемент другим, реакт сравнивает их и обновляет только изменившиеся части.

----------

Компоненты это независимые переиспользуемые части реакта. В js можно сравнить с функциями, они принимают на вход данные (props) и возвращают реакт элемент, описывающий что должно появиться на  экране.
Именовать props нужно в контексте компонента, а не в контексте данных, которые в них используются. Props доступны только для чтения
Компоненты всегда должны начинаться с большой буквы. Компоненты написаные с маленькой буквы реакт считает обычными ДОМ элементами.
Если компоненты используются несколько раз или слишком большие по размеру, это хороший знак для того, чтобы разбить их на более мелкие.

----------

В больших приложениях очень важно освобождать ресурсы компонентов, на которые они подписаны при разрушении.
Реакт может группировать несколько setState() вызовов в один ради производительности. Из-за того что this.props и this.state могут обновляться асинхронно мы не можем рассчитывать на них для вычисления следующего state. Для решения этой ситуации существует вторая форма записи setState(), которая принимает на вход функцию. Функция получает первым параметром предыдущий state, а вторым props, применяемые на время апдейта.

----------

Реакт использует синтетические события.
preventDefault нужно вызывать явно. 
<button onClick={(e) => this.handleClick(e)} /> - каждый раз при рендере создается новая функция. При передаче ее в пропсах у children будет вызываться метод рендер, т.к. пришли новые пропс. Лучше биндить методы класса явно в конструкторе или использовать экспериментальный синтаксис myFunc = () => {...}

----------
