- Что такое React?
- React это библиотека для создания пользовательских интерфейсов. В реакте используется XML подобный синтаксис,
называемый JSX для декларативного описания темплейтов. В реакте используется компонентный подход, когда вся
логика приложения строится отдельными переиспользуемыми блоками.

- Что вы знаете про жизненный цикл компонентов?
- Жизненный цикл компонента делится на 4 блока:
    1. Mounting - создание экземпляра компонента и его рендеринг в DOM.
    2. Updating - обновление компонента в результате изменений в props или state.
    3. Unmounting - удаление компонента из DOM.
    4. Error handling - обработка ошибок.
  ---
    Mounting:
        * constructor(): в нем инициализируется state компонента и происходит
        биндинг (bind) методов. Если нет необходимости в этих действиях, нет смысла реализовывать
        constructor.
        * static getDerivedStateFromProps(props, state): вызывается перед методом render. 
        Этот метод существует для редких случаев, когда state зависит от изменений в props со временем.
        * render(): единственный обязательный для реализации метод в жизненном цикле компонента. 
        Должен содержать чистую функцию, которая не изменяет state компонента и возвращает
        React elements / Arrays and fragments / Portals / String and numbers / Booleans or null.
        * componentDidMount(): вызывается сразу после рендера компонента в DOM. Если есть необходимость
        выполнить какие-либо асинхронные запросы / манипуляции с DOM / подписки на события, это необходимо
        делать здесь.
    Updading:
        * static getDerivedStateFromProps().
        * shouldComponentUpdate(): вызывается перед render, когда приходят новые state / props.
        Этот метод существует только как оптимизация производительности. В нем сравниваются ссылки
        на старые и новые state / props. По умолчанию возвращает true.
        * render().
        * getSnapshotBeforeUpdate(prevProps, prevState): существует для редких случаев, когда
        необходимо собрать информацию для рендеринга из DOM. Возвращает snapshot или null, это
        значение передается в метод componentDidUpdate() в качестве аргумента.
        * componentDidUpdate(prevProps, prevState, snapshot): вызывается сразу после обновления
        компонента. Служит для взаимодействия с DOM, асинхронных запросов, основанных на измененных
        props / state.
    Unmounting: 
        * componentWillUnmount(): вызывается перед удалением компонента из DOM и его разрушением.
        Существует для очистки компонента, например, от существующих таймеров, отмены асинхронных
        запросов и подписок.
    Error handling:
        * componentDidCatch(): вызывается при ошибке во время рендеринга, в методах жизненного цикла или
        в методе constructor() вложенных компонентов. Позволяет отловить случившуюся ошибку и вывести
        сообщение пользователю.
        
- Чем отличается PureComponent от Functional Component
- PureComponent по умолчанию реализует метод shouldComponentUpdate(), в результате чего метод render() 
вызывается только при новых props / state. Functional Component это чистая функция, в которой нет state
и которая всегда возвращает одинаковую разметку при одинаковых props.


