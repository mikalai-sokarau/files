@NgModule({
  declarations:   [ AppComponent ],  // components, directives, pipes
  providers:      [ Logger ],        // services
  imports:        [ BrowserModule ], // modules
  exports:        [ ],               // public components
  entryComponents:[ ],               // dynamic loaded components
  bootstrap:      [ AppComponent ]   // root component
  schema:         [ ]                // NO_ERRORS_SCHEMA, CUSTOM_ELEMENTS_SCHEMA
})

https://angular.io/guide/styleguide

Angular CLI:
ng new *Name* - создание нового приложения.
ng serve -o - запуск сервера.
ng build - создание production сборки.
ng g *NAME*

#name в темплейте - объявление шаблонной переменной, к которой можно будет обратиться
внутри темплейта.

@Injectable - декоратор для сервисов.
@Pipe - декоратор для пайпов + implements PipeTransform.

@Onput - входные параметры для компонента.
@Output - выходные параметры компонента.
Основная идея существования этих декораторов - обмен данными между компонентами.

@HostBinding - добавление на элемент каких-либо свойств.
@HostListener - добавление на элемент обработчиков событий.
@ViewChild(#name) - доступ к шаблонной переменной темплейта внутри класса.
@ViewChild(ChildComponent) - доступ к дочернему компоненту.
@ViewChildren - доступ к коллекции компонентов.
@ContentChild - доступ к контенту между тегами.
@ContentChildren - доступ к коллекции компонентов с контентом.

ElementRef - обертка вокруг нативного элемента (получить сам элемент можно через
свойство ElementRef.nativeElement).

Для внедрения зависимостей используется конструктор класса. Больше не для 
чего конструктор не используется.

public - если сервис планируется использовать в шаблоне
private - если сервис используется внутри класса

Life cycle:
# Компонента
constructor - выполняется, создается компонент, получаем экземпляр компонента.
OnChanges - служит для того чтобы передать все Input данные и инициализировать их,
выполняется каждый раз когда происходят изменения.
OnInit
DoCheck - применяется когда нужно отследить изменения во входных данных, но входные
данные являются сложными (массивы, объекты) и нас интересует не изменение ссылки
на эти данные, а изменения самих данных или их структуры. Дорогостоящая операция, 
легче отслеживать изменение ссылки. 
# Шаблона
AfterViewInit - доступ к переменным после инициализации.
AfterContentInit - 
AfterViewChecked - 
AfterContentChecked - 
OnDestroy - удаление компонента из дерева.

Content projection - в тег <ng-content/> отрендерится содержимое компонента.

Unit тесты.
Нужны для тестирования небольших самостоятельных фрагментов кода.
Дают уверенность что изменения не сломают существующую функциональность.
Уточняют что делает код. 
Открывают ошибки в дизайне и реализации.
Должны быть: быстрые, дешевые для написания, один тест должен затрагивать одно изменение
должна присутствовать одна проверка (assert +-), надежные.

# Изолированные (проверяют только класс, пайп, сервис ...)
# Интеграционные (тестируют как класс, директива взаимодействует со своим шаблоном)

TestBed - позволяет создать зависимости для компонента (как ngModule) с помощью 
TestBed.configureTestingModule({});
TestBed.createComponent создает обертку для компонента (fixture, в ней дополнительные
свойства для работы с этим компонентом: 
  componentInstance: (возвращает компонент).
  debugElement: ( .query / .queryAll обертка для поиска по шаблону, возвращает тоже обертку)).
  nativeElement: DOM элемент.
  detectChanges: метод для передачи свойств класса в шаблон.

By.(css / directive / all)
  #all - любые элементы
  #css - css селектор
  #directive - класс директивы / компонента / ... (вернет первый найденный элемент)



