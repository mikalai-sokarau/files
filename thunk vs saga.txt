Thunk позволяет вместо объектов диспатчить функции.
Saga позволяет диспатчить чистые функции, что желательно для тестирования. В саге используются генераторы, которые позволяют получать промежуточный результат выполнения функции через ключевое слово yield и возобновлять дальнейшие вычисление через свойство генератора next(). Таким образом мы можем осуществить определенный порядок действий в зависимости от результата предыдущего запроса.

Saga:
call - блокирующая обработка запроса.
fork - не блокирующая обработка запроса, возвращает объект запроса.
cancel(obj) - отменяет запрос если он еще выполняется.
yield cancelled() - позволяет в блоке finally обработать отмену запроса.
yield all([..., ..., ...]) - позволяет запустить несколько запросов parallel.
yield race({label: effect, ...}) - запускает несколько запросов, ждет выполнение первого.
delay(ms, [val]) - возвращает промис, который резолвится через ms с val.
actionChannel(pattern, [buffer]) - создает буфер для последовательной обработки запросов, если сага еще не завершила выполнение предыдущего запроса.

