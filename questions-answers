API and backend service developer. Skills / experience:
•	nodeJS – must
•	REST – must
•	Swagger – desired
•	SQL / NoSQL – must (mongo)
•	Microservices – desired
•	AWS lambda – desired

today:
REST
HTTP
SQL basics

REST - архитектурный стиль взаимодействия компонентов распределенного приложения в сети.
Принципы:
1. Наличие модели клиент-сервер (отдельные части приложения независимые друг от друга).
2. Отсутствие состояния. В период между запросами никакая информация о состоянии клиента
не хранится на сервере. Во время запроса клиент хранится в переходном состоянии.
3. Кэширование. Данные в ответе сервера могут быть обозначены как кэшируемые или не кэшируемые.
Правильное кэширование может ограничить / устранить некоторые клиент-серверные взаимодействия.
4. Единообразие интерфейса 
5. Многоуровневая система. Для обработки запросов могут использоваться другие ресурсы / сервера, при этом 
клиент не обязан знать об этом.
6. Код по требованию. Клиент может запрашивать дополнительную функциональность приложения.

HTTP - протокол передачи данных, изначально гипертекста, в настоящее время произвольных.
Структура протокола: 
   +  1. Стартовая строка - определяет тип сообщения.
   +  2. Заголовки (headers) - описывают тело сообщения, параметры передачи и пр.
   +- 3. Тело (body) - сообщение с данными. Отделяется от headers пустой строкой.
Стартовая строка:
    # для запроса (с клиента) - "method URI HTTP/version"
        method - тип запроса, одно слово заглавными буквами.
        URI - путь к запрашиваемому документу.
        version - пара цифр разделенных точкой (напр. 1.0).
        ----- пример -----
        GET /wiki/HTTP HTTP/1.0
        Host: ru.wikipedia.org
        ------------------
    # для ответа (от сервера) - "HTTP/version status_code description"
        version - аналогично запросу с клиента.
        status_code - три цифры
    +-  description - короткое текстовое пояснение для пользователя
        --- пример ---
        HTTP/1.0 200 OK
        --------------
Методы - последовательность символов указывающих на основную операцию над ресурсом.
Чуствительны к регистру. Основные методы:
    # GET - для запроса содержимого указанного ресурса. Пример: 
        "GET /path/resource?param1=value1&param2=value2 HTTP/1.1"
    # POST - для передачи пользовательских данных ресурсу, при этом данные включаются в тело запроса.
        В результате ответа 200(ok) в тело ответа включается сообщение об итоге выполнения запроса.
    # PUT - для загрузки содержимого запроса на указанный URI.
    # HEAD - аналогичен HEAD, отсутствует только тело ответа. Применяется для извлечения 
        метаданных, проверки наличия/изменения ресурса.
    # DELETE - удаляет указанный ресурс.

Коды состояния: 
    1хх - информационные.
    2хх - успех.
    3хх - перенаправление.
    4хх - ошибка клиента.
    5хх - ошибка сервера.

Заголовки (HTTP headers) - строки в виде ключ:значение.
    Основные группы: 
        general - для любых сообщений (универсальные).
        request - для запросов клиента.
        response - для ответов сервера.
        entity - для описания сущности сообщения.

Тело сообщения (message-body) - тело объекта запроса / ответа.

SQL
База данных - информация структурированная в электронном виде.

